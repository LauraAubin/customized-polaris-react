@import 'src/ThemeablePolarisReact/styles';
@import 'src/ThemeablePolarisReact/themes';

@function findcolor($theme, $styleName) {
  @if map-has-key($theme, $styleName) {
    @return map-get($theme, $styleName);

  } @else {
    $scoped: map-get($themes, 'default');

    @return map-get($scoped, $styleName);
  }
}

$item-min-height: rem(16px);
$item-min-width: rem(50px);
$item-vertical-padding: $item-min-height / 2;

.Tabs {
  display: flex;
  margin: 0;
  padding: 0;
  border-bottom: border();
  list-style: none;
}

.fitted {
  .TabContainer {
    flex: 1 1 100%;
  }

  .Tab {
    padding: 0;
  }

  .Title {
    width: 100%;
    padding: spacing(tight) spacing();
  }
}

.fillSpace {
  .TabContainer {
    flex: 1 1 auto;
  }
}

.TabContainer {
  display: flex;
  margin: 0;
  padding: 0;
}

@mixin Tab {
  @each $themeType, $theme in $themes {
    &-#{$themeType} {
      @include unstyled-link;
      @include unstyled-button;
      @include text-style-body;
      @include text-emphasis-subdued;
      position: relative;
      justify-content: center;
      width: 100%;
      min-width: 100%; // IE11 fix for overflowing flex items from parent container
      margin-top: 1px;
      margin-bottom: -1px;
      padding: 0 spacing();
      outline: none;
      text-align: center;
      white-space: nowrap;
      text-decoration: none;
      cursor: pointer;
      background: findcolor($theme, background);

      &:hover {
        .Title {
          @include text-emphasis-normal;
          text-decoration: none;
          border-bottom: border-width(thicker)
            solid
            map-get($theme, tab-title-hover);
        }
      }

      &:focus {
        box-shadow: inset 0 0 2px 0 map-get($theme, tab-focus-box-shadow),
          0 0 2px 0 map-get($theme, tab-focus-box-shadow);

        .Title {
          @include text-emphasis-normal;
          border-bottom: border-width(thicker)
            solid
            map-get($theme, tab-focus-title-border);
        }
      }

      &:visited {
        color: map-get($theme, tab-visited);
      }

      &.Tab-selected {
        // stylelint-disable-next-line selector-max-class
        .Title {
          border-bottom: border-width(thicker)
            solid
            map-get($theme, tab-selected-title-border);
        }
      }
    }
  }
}

.Tab {
  @include Tab;
}

.Tab-selected {
  @include text-emphasis-normal;
}

.Title {
  display: block;
  padding: spacing() 0 (spacing() - border-width(thicker)) 0;
  border-bottom: border-width(thicker) solid transparent;
  min-width: $item-min-width;
}

.Panel {
  display: block;

  &:focus {
    outline: none;
  }
}

.List {
  list-style: none;
  margin: 0;
  padding: spacing(tight) 0;
}

.Item {
  @include unstyled-link;
  @include unstyled-button;
  display: block;
  width: 100%;
  min-height: $item-min-height;
  padding: $item-vertical-padding spacing();
  text-align: left;
  cursor: pointer;

  &:active {
    @include state(active);

    &:hover {
      @include state(active, hover);

      // stylelint-disable-next-line selector-max-specificity
      &:focus {
        @include state(active, hover, focused);
      }
    }
  }

  &:hover {
    @include state(hover);

    &:focus {
      @include state(hover, focused);
    }
  }

  &:focus {
    @include state(focused);
  }

  &::-moz-focus-inner {
    border: none;
  }
}

.DisclosureTab {
  display: none;
}

.DisclosureTab-visible {
  display: flex;
}

@mixin DisclosureActivator {
  @each $themeType, $theme in $themes {
    &-#{$themeType} {
      @include recolor-icon(map-get($theme, disclosure-activator-icon));
      position: relative;
      justify-content: center;
      height: 100%;
      padding: 0 spacing();
      background-color: transparent;
      cursor: pointer;
      border: none;
      outline: none;
      text-align: center;
    }
  }
}

.DisclosureActivator {
  @include DisclosureActivator;
}

.TabMeasurer {
  display: flex;
  visibility: hidden;
  height: 0;
}
